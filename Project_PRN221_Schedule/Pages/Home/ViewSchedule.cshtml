@page
@model Project_PRN221_Schedule.Pages.Home.ViewScheduleModel
@using System.Globalization
@using System.Threading

@{
    ViewData["Title"] = "ViewSchedule";
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        .table th {
            background-color: #f2f2f2;
        }

        .table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .table tr:hover {
            background-color: #ddd;
        }

    .bold {
        font-weight: bold;
    }
</style>

<form method="post" id="weekForm">
    <div>
        <label for="year">Select Year:</label>
        <select id="year" name="year">
            @{
                var currentYear = DateTime.Now.Year;
                var startYear = new DateTime(2022, 3, 3).Year;
                for (int i = startYear; i <= currentYear; i++)
                {
                    <option selected="@(currentYear ==  Model.SelectedDate.Year ? "selected" : null)" value="@i">@i</option>
                }
            }
        </select>
    </div>
    <br />
    <div>

        <label for="week">Select Week:</label>
        <select id="week" name="week">
            @{
                var selectedYear = Model.SelectedDate.Year;
                if (!string.IsNullOrEmpty(Request.Query["year"]))
                {
                    selectedYear = Convert.ToInt32(Request.Query["year"]);
                }

                var ci = CultureInfo.CurrentCulture;
                var cal = ci.Calendar;
                int weeks = cal.GetWeekOfYear(new DateTime(selectedYear, 12, 31), CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

                for (int i = 1; i <= weeks; i++)
                {
                    var jan1 = new DateTime(selectedYear, 1, 1);
                    var daysToMonday = (int)(DayOfWeek.Monday - jan1.DayOfWeek);
                    if (daysToMonday < 0) // Nếu ngày 1/1 không phải là thứ Hai
                        daysToMonday += 7; // Cần phải thêm vào 7 ngày để đạt được thứ Hai gần nhất
                    var startOfWeek = jan1.AddDays(daysToMonday + (i - 1) * 7);
                    var endOfWeek = startOfWeek.AddDays(6);
                    <option selected="@(startOfWeek == Model.SelectedDate ? "selected" : null)" value="@i">Week @(i) (@startOfWeek.ToShortDateString() - @endOfWeek.ToShortDateString())</option>
                }
            }
        </select>
    </div>
</form>
<br />
<table class="table">
    <thead>
        <tr>
            <th>Slot</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Saturday</th>
            <th>Sunday</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var slot in Model.Slots)
        {
            <tr>
                <td>@slot.Id</td>
                @for (int dayOfWeek = 2; dayOfWeek <= 8; dayOfWeek++)
                {
                    <td>
                        @foreach (var schedule in Model.WeekSchedule.Where(w => w.Slot.Id == slot.Id && w.WeekIndex == dayOfWeek))
                        {
                            <div>
                                <span class="bold">Room:</span> @schedule.Room.RoomCode<br />
                                <span class="bold">Class:</span> @schedule.Group.Class.ClassName<br />
                                <span class="bold">Subject:</span> @schedule.Group.Course.CourseCode<br />
                                <span class="bold">Teacher:</span> @schedule.Group.Teacher.TeacherName<br />
                                <span class="bold">TimeSlot:</span> @schedule.Slot.StartTime - @schedule.Slot.EndTime<br />
                            </div>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<script>

    document.getElementById('week').addEventListener('change', function () {
        document.getElementById('weekForm').submit();
    });

    // Lưu giá trị của năm và tuần khi chúng thay đổi
    document.getElementById("year").addEventListener("change", function () {
        var selectedYear = this.value;
        var selectedWeek = document.getElementById("week").value;
        sessionStorage.setItem("selectedYear", selectedYear);
        sessionStorage.setItem("selectedWeek", selectedWeek);

        // Cập nhật danh sách tuần dựa trên năm mới đã chọn
        var weeksSelect = document.getElementById("week");
        weeksSelect.innerHTML = ''; // Xóa danh sách tuần hiện có

        // Tính toán số tuần trong năm
        var weeksInYear = getISOWeeksInYear(selectedYear);
        for (var i = 1; i <= weeksInYear; i++) {
            var startOfWeek = getWeekStartDate(selectedYear, i);
            var endOfWeek = new Date(startOfWeek.getTime() + 6 * 24 * 60 * 60 * 1000);
            var weekOption = document.createElement("option");
            weekOption.text = "Week " + i + " (" + startOfWeek.toLocaleDateString() + " - " + endOfWeek.toLocaleDateString() + ")";
            weekOption.value = i;
            weeksSelect.add(weekOption);
        }
    });

    // Hàm tính số tuần trong năm ISO
    function getISOWeeksInYear(year) {
        var d = new Date(year, 11, 31);
        var day = d.getDay();
        var weekCount = 0;

        // Nếu ngày cuối năm là thứ Hai và năm nhuần, tuần cuối cùng sẽ là tuần thứ 53
        if (day === 1 && (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0))) {
            weekCount = 53;
        } else {
            weekCount = 52;
        }

        return weekCount;
    }


    // Hàm lấy ngày bắt đầu của một tuần trong năms
    function getWeekStartDate(year, weekNumber) {
        var jan1 = new Date(year, 0, 1);
        var dayOfWeek = jan1.getDay(); // Ngày trong tuần của ngày 1/1
        var daysToAdd = 1 - dayOfWeek; // Số ngày cần thêm để đạt được thứ 2
        if (dayOfWeek === 0) {
            daysToAdd = 1; // Nếu ngày 1/1 là Chủ nhật, thêm 1 ngày để đạt được thứ 2
        } else if (dayOfWeek > 1) {
            daysToAdd += 7; // Nếu ngày 1/1 không phải là thứ 2, cần thêm số ngày đến thứ 2 tuần sau
        }
        var firstMonday = new Date(jan1.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
        var weekStartDate = new Date(firstMonday.getTime() + (weekNumber - 1) * 7 * 24 * 60 * 60 * 1000);
        return weekStartDate;
    }



    // Khôi phục giá trị của năm và tuần khi trang được tải lại
    document.addEventListener("DOMContentLoaded", function () {
        var selectedYear = sessionStorage.getItem("selectedYear");
        var selectedWeek = sessionStorage.getItem("selectedWeek");

        if (selectedYear !== null) {
            document.getElementById("year").value = selectedYear;
        }

        if (selectedWeek !== null) {
            document.getElementById("week").value = selectedWeek;
        }
    });

    // Lưu giá trị của tuần khi nó thay đổi
    document.getElementById("week").addEventListener("change", function () {
        var selectedWeek = this.value;
        var selectedYear = document.getElementById("year").value;
        sessionStorage.setItem("selectedYear", selectedYear);
        sessionStorage.setItem("selectedWeek", selectedWeek);
    });

</script>
